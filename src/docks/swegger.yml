openapi: 2.0
info:
  title: API - Prova_JK
  description: "API para user, order e product (remodelada do modelo MVC)"
  version: 1.0.0
servers:
  - url: "http://localhost:3001"
schemas:
  - http
  - https
tags:
  - name: Users
    description: Operações relacionadas a user
  - name: Tasks
    description: Operações relacionadas a Order
  - name: Projects
    description: Operações relacionadas a product

paths:
  /users:
    get:
      tags:
        - Users
      summary: Lista todos os user
      operationId: getUsers
      responses:
        "200":
          description: Lista de user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "400":
          description: Requisição inválida
        "404":
          description: Não encontrado
        "500":
          description: Servidor não disponível
    post:
      tags:
        - Users
      summary: Cria um novo User
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "201":
          description: User criado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  "/users/{id}":
    get:
      tags:
        - Users
      summary: Busca um User ID
      operationId: getUserById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: User encontrado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "404":
          description: User não encontrado
    put:
      tags:
        - Users
      summary: Atualiza um User ID
      operationId: updateUser
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: User atualizado
    delete:
      tags:
        - Users
      summary: Deleta um User ID
      operationId: deleteUser
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: User deletado com sucesso

  /products:
    get:
      tags:
        - Products
      summary: Lista
      operationId: getProduct
      responses:
        "200":
          description: Lista de products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
        "400":
          description: Requisição inválida
        "404":
          description: Não encontrado
        "500":
          description: Servidor não disponível
    post:
      tags:
        - Products
      summary: Cria um novo product
      operationId: createProduct
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        "201":
          description: User criado com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
  "/products/{id}":
    get:
      tags:
        - Users
      summary: Busca um product ID
      operationId: getUserById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: product encontrado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "404":
          description: product não encontrado
    put:
      tags:
        - Products
      summary: Atualiza um product ID
      operationId: updateProduct
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        "200":
          description: product atualizado
    delete:
      tags:
        - Products
      summary: Deleta um product ID
      operationId: deleteProduct
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: product deletado com sucesso

  /categorys:
    get:
      tags:
        - Category
      summary: Lista todos as categorias
      operationId: getCategory
      responses:
        "200":
          description: Lista de categorias
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Category"
        "400":
          description: Requisição inválida
        "404":
          description: Não encontrado
        "500":
          description: Servidor não disponível
    post:
      tags:
        - Users
      summary: Cria uma nova categoria
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Category"
      responses:
        "201":
          description: categoria criada com sucesso
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
  "/categorys/{id}":
    get:
      tags:
        - Categorys
      summary: Busca uma categoria ID
      operationId: getUserById
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: categoria encontrada
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        "404":
          description: categoria não encontrada
    put:
      tags:
        - Categorys
      summary: Atualiza uma categoria ID
      operationId: updateCategory
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Category"
      responses:
        "200":
          description: categoria atualizada
    delete:
      tags:
        - Categorys
      summary: Deleta uma categoria ID
      operationId: deleteCategory
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: categoria deletada com sucesso

components:
  schemas:
    User:
      type: object
      required:
        - nome
        - email
        - senha
      properties:
        id:
          type: integer
          format: int32
        nome:
          type: string
        email:
          type: string
          format: email
        senha:
          type: string
          format: password

  Product:
    type: object
    required:
      - name
      - price
      - idCategory
    properties:
      id:
        type: integer
        format: int32
      name:
        type: string
      price:
        type: float
        format: email
      idCategory:
        type: integer
        format: int32

  Order:
    type: object
    required:
      - idIdUser
    properties:
      id:
        type: integer
        format: int32
      idUser:
        type: integer
        format: int32

OrderItem:
  type: object
  required:
    - idOrder
    - idProduct
  properties:
    id:
      type: integer
      format: int32
    idOrder:
      type: integer
      format: int32
    idProduct:
      type: integer
      format: int32

securityDefinitions:
  BearerAuth:
    type: apiKey
    name: Authorization
    in: header
    description: "Digite o token no formato: Bearer <token>"
security:
  - BearerAuth: []
